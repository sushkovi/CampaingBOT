import telebot
from telebot import types
from datetime import datetime, timedelta
import sqlite3
import pandas as pd

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot('7875781676:AAGtiHZVPDIM8UToLkX3nD88xkjM-VGyD04')

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
user_states = {}

# –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('campaigns.db')
    c = conn.cursor()
    c.execute('''
        CREATE TABLE IF NOT EXISTS campaigns
        (campaign_name TEXT, 
         start_date DATE,
         notification_date DATE,
         notified BOOLEAN)
    ''')
    conn.commit()
    conn.close()

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞–º–ø–∞–Ω–∏–∏
def add_campaign(campaign_name):
    conn = sqlite3.connect('campaigns.db')
    start_date = datetime.now().date()
    
    # –†–∞—Å—á–µ—Ç –¥–∞—Ç—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (7 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π)
    notification_date = start_date
    working_days = 0
    while working_days < 7:
        notification_date += timedelta(days=1)
        if notification_date.weekday() < 5:  # 0-4 —ç—Ç–æ –ø–Ω-–ø—Ç
            working_days += 1
    
    cursor = conn.cursor()
    cursor.execute('''
        INSERT INTO campaigns (campaign_name, start_date, notification_date, notified)
        VALUES (?, ?, ?, ?)
    ''', (campaign_name, start_date, notification_date, False))
    
    conn.commit()
    conn.close()
    return notification_date

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
def check_notifications():
    conn = sqlite3.connect('campaigns.db')
    cursor = conn.cursor()
    today = datetime.now().date()
    
    cursor.execute('''
        SELECT campaign_name, notification_date
        FROM campaigns
        WHERE notification_date <= ? AND notified = False
    ''', (today,))
    
    notifications = cursor.fetchall()
    
    for campaign_name, notification_date in notifications:
        cursor.execute('''
            UPDATE campaigns
            SET notified = True
            WHERE campaign_name = ? AND notification_date = ?
        ''', (campaign_name, notification_date))
    
    conn.commit()
    conn.close()
    return notifications

# –°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
def create_main_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    btn1 = types.KeyboardButton('‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–º–ø–∞–Ω–∏—é')
    btn2 = types.KeyboardButton('üìã –°–ø–∏—Å–æ–∫ –∫–∞–º–ø–∞–Ω–∏–π')
    btn3 = types.KeyboardButton('‚ùì –ü–æ–º–æ—â—å')
    markup.add(btn1, btn2, btn3)
    return markup

# –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞–º–ø–∞–Ω–∏–∏
def delete_campaign(campaign_name):
    conn = sqlite3.connect('campaigns.db')
    cursor = conn.cursor()
    cursor.execute('DELETE FROM campaigns WHERE campaign_name = ? AND notified = False', (campaign_name,))
    conn.commit()
    conn.close()

# –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫ –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–∞–º–ø–∞–Ω–∏–π
def create_campaigns_markup():
    conn = sqlite3.connect('campaigns.db')
    cursor = conn.cursor()
    cursor.execute('SELECT campaign_name FROM campaigns WHERE notified = False')
    campaigns = cursor.fetchall()
    conn.close()

    markup = types.InlineKeyboardMarkup(row_width=1)
    for campaign in campaigns:
        markup.add(types.InlineKeyboardButton(
            text=f"‚ùå {campaign[0]}", 
            callback_data=f"delete_{campaign[0]}"
        ))
    return markup

@bot.message_handler(commands=['start'])
def send_welcome(message):
    bot.reply_to(message, 
                 "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –≤–∞—à–∏ –∫–∞–º–ø–∞–Ω–∏–∏.\n"
                 "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–º–ø–∞–Ω–∏—è–º–∏.", 
                 reply_markup=create_main_menu())

@bot.message_handler(func=lambda message: message.text == '‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–º–ø–∞–Ω–∏—é')
def add_campaign_request(message):
    msg = bot.send_message(message.chat.id, 
                          "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞–º–ø–∞–Ω–∏–∏:",
                          reply_markup=types.ForceReply())
    user_states[message.chat.id] = 'waiting_for_campaign_name'

@bot.message_handler(func=lambda message: message.text == 'üìã –°–ø–∏—Å–æ–∫ –∫–∞–º–ø–∞–Ω–∏–π')
def list_campaigns(message):
    conn = sqlite3.connect('campaigns.db')
    df = pd.read_sql_query('''
        SELECT campaign_name, start_date, notification_date
        FROM campaigns
        WHERE notified = False
        ORDER BY notification_date
    ''', conn)
    
    if df.empty:
        bot.reply_to(message, "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π")
    else:
        response = "–ê–∫—Ç–∏–≤–Ω—ã–µ –∫–∞–º–ø–∞–Ω–∏–∏:\n\n"
        for _, row in df.iterrows():
            response += f"üìä {row['campaign_name']}\n"
            response += f"–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: {row['start_date']}\n"
            response += f"–î–∞—Ç–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {row['notification_date']}\n\n"
        
        bot.send_message(message.chat.id, response, 
                        reply_markup=create_campaigns_markup())
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —Å–ø–∏—Å–∫–∞
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", 
                        reply_markup=create_main_menu())
    
    conn.close()

@bot.message_handler(func=lambda message: message.text == '‚ùì –ü–æ–º–æ—â—å')
def help_command(message):
    help_text = """
ü§ñ –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:

‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–º–ø–∞–Ω–∏—é - –¥–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—É—é –∫–∞–º–ø–∞–Ω–∏—é –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è

üìã –°–ø–∏—Å–æ–∫ –∫–∞–º–ø–∞–Ω–∏–π - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–∞–º–ø–∞–Ω–∏–∏ –∏ –ø–æ–∑–≤–æ–ª—è–µ—Ç —É–¥–∞–ª–∏—Ç—å –∏—Ö

‚ùå –ß—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –∫–∞–º–ø–∞–Ω–∏—é, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –µ—ë –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ —Å–ø–∏—Å–∫–µ –∫–∞–º–ø–∞–Ω–∏–π

‚è∞ –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 7 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–º–ø–∞–Ω–∏–∏
    """
    bot.send_message(message.chat.id, help_text)

@bot.message_handler(func=lambda message: user_states.get(message.chat.id) == 'waiting_for_campaign_name')
def handle_campaign_name(message):
    campaign_name = message.text
    notification_date = add_campaign(campaign_name)
    bot.send_message(message.chat.id, 
                f"‚úÖ –ö–∞–º–ø–∞–Ω–∏—è '{campaign_name}' –¥–æ–±–∞–≤–ª–µ–Ω–∞.\n"
                f"üìÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {notification_date}",
                reply_markup=create_main_menu())
    user_states.pop(message.chat.id, None)

@bot.callback_query_handler(func=lambda call: call.data.startswith('delete_'))
def handle_delete_campaign(call):
    campaign_name = call.data[7:]  # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å 'delete_'
    delete_campaign(campaign_name)
    bot.answer_callback_query(call.id, f"–ö–∞–º–ø–∞–Ω–∏—è '{campaign_name}' —É–¥–∞–ª–µ–Ω–∞")
    bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, 
                                reply_markup=create_campaigns_markup())
    bot.send_message(call.message.chat.id, 
                          f"‚úÖ –ö–∞–º–ø–∞–Ω–∏—è '{campaign_name}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞",
                          reply_markup=create_main_menu())

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
def send_notifications(chat_id):
    notifications = check_notifications()
    for campaign_name, _ in notifications:
        bot.send_message(chat_id, 
                        f"‚ö†Ô∏è –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –ø—Ä–æ—à–ª–æ 7 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π —Å –º–æ–º–µ–Ω—Ç–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ "
                        f"–∫–∞–º–ø–∞–Ω–∏–∏ '{campaign_name}'.\n"
                        f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–±–µ—Ä–∏—Ç–µ –∏—Ç–æ–≥–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ.")

if __name__ == "__main__":
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    init_db()
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    bot.polling(none_stop=True)